 <!-- Navigation -->
<nav class="navbar navbar-default">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="index.html">
        <img alt="Brand" src="../images/patterndeck-logo.svg" width="40px" onerror="this.src='../images/patterndeck-logo.png'; this.onerror=null;"> Connecting Life | <small>A pattern language for Communication Networks</small> 
      </a>
    </div>
  </div>
</nav>

    <!-- Page Header -->
    <!-- Set your background image for this header on the line below. -->
    <header>
        <div class="container">
            <div class="row">
                <div class="col-md-7 col-md-offset-3 col-xs-10 col-xs-offset-1">
                    <div class="post-heading">
                        <h4>Pattern</h4>
                        <h1>Changeable by Many</h1>
                        <span class="meta">
                        <img src="images/maturity-1.svg" width="10px">
                        <img src="images/maturity-1.svg" width="10px">
                        <img src="images/maturity-1.svg" width="10px">
                        <hr>
                        <img src="images/patterns/changeable-by-many.jpg" width="100%" alt="..."> 
                       <hr>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Post Content -->
    <article>
        <div class="container">
            <div class="row">
                 
                     <div class="col-xs-10 col-xs-offset-1 col-md-7 col-md-push-2 col-md-offset-1">
                    <div id="patternsModal5-content1"></div>
            <script>
              document.getElementById('patternsModal5-content1').innerHTML =
                marked('*Any product stakeholder, irrespective of whether they are from marketing or technology, should be able to configure the most frequently occurring changes themselves.*<br /><br />Modifying the behaviour of a product’s feature, adding new features, or removing unused ones can de-stabilize the product when the dependencies between features are poorly understood. In demand-supply organizations, the problem is further amplified when changes have to be specified by the demand organization in great detail, approved by the service management organization to ensure that the operations of the existing product is not de-stabilized in any way, and finally accepted by the supply organization when the nature of the change is clearly understood. Things that seem important at the beginning of a product lifecycle seem less important after the product has been in operation for a few years, which is reflected in different change requirements for the product. The individuals who demand changes with a commercial focus usually specify what must be changed, rather than executing the change themselves. In complex environments with several products, comprehensive and detailed specification is required to make product changes, and the knowledge of how to make these changes is only understood by a few individuals in the supply organization. Only the most critical changes are implemented, and retrospective minor improvements are difficult without going through an expensive and laborious change management process. Excessive configurability introduces greater complexity, and the introduction of greater complexity without a proportional increase in value gradually chokes an organization’s growth. <br /><br />Therefore avoid making the product excessively configurable when it is first being realized, and focus on ensuring the product’s dependencies are clearly understood. Once the product is in operation, identify the few changes that are required most of the time, and make those configurable. Make configuration knowledge necessary for every product stakeholder, regardless of whether they have a commercial, implementation, or operational focus. Focus on the configurability of an individual product first, rather than seeking structures to configure several products simultaneously. Delay “future-proofing” the product’s configurability by trying to predict the aspects of the product that might require configuration someday by focusing on existing patterns of configurability. Introduce configurability in a manner that commercial, technical, and operational staff can make changes. If a product really requires a high quotient of configurability, prefer making changes in source code over configuration files.<br /><br />Make a product’s [Configurability Inverse to its Complexity](configuration-inverse-to-its-complexity.html), and ensure investment in a product’s configurability develops through its [Ringed Growth](ringed-growth.html). Make the salient features of the product configurable by any of the [Three Champions](three-product-champions.html). Through [Constant Circulation](constant-circulation.html) where all products are [Planted in a Single Garden](plant-in-a-single-garden.html), and continuously [Pruning Products](pruning-products.html) by a [Few Skilled Gardeners](few-skilled-gardeners.html), keep the configurability of products proportional to their value.');
            </script>
                </div>
                
              
        </div>
    </article>

    <!-- Footer -->
{{>footer}}